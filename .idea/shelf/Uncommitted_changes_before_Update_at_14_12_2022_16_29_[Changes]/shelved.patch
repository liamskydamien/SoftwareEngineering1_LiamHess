Index: src/Uebung1/utility/TranslatorFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Uebung1.utility;\r\n\r\nimport Uebung1.control.GermanTranslator;\r\n/**\r\n * Factory Method Pattern\r\n */\r\npublic class TranslatorFactory{\r\n    public static GermanTranslator createGermanTranslator(){\r\n        return new GermanTranslator();\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/Uebung1/utility/TranslatorFactory.java b/src/Uebung1/utility/TranslatorFactory.java
--- a/src/Uebung1/utility/TranslatorFactory.java	
+++ b/src/Uebung1/utility/TranslatorFactory.java	
@@ -1,6 +1,6 @@
-package Uebung1.utility;
+package uebung1.utility;
 
-import Uebung1.control.GermanTranslator;
+import uebung1.control.GermanTranslator;
 /**
  * Factory Method Pattern
  */
Index: src/Uebung1/test/GermanTranslatorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Uebung1.test;\r\n\r\nimport Uebung1.control.GermanTranslator;\r\nimport Uebung1.control.Translator;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\npublic class GermanTranslatorTest {\r\n    private final GermanTranslator translator = new GermanTranslator();\r\n\r\n    @Test\r\n    public void testWorking() {\r\n        assertEquals(\"sieben\", translator.translateNumber(7));\r\n    }\r\n\r\n    /**\r\n     * Hier ist ein Boundries test nicht nötig. Der vollständigkeit nehme ich aber als Test mit auf\r\n     */\r\n    @Test\r\n    public void testBoundries(){\r\n        assertEquals(\"eins\", translator.translateNumber(1));\r\n        assertEquals(\"zehn\", translator.translateNumber(10));\r\n    }\r\n\r\n    @Test\r\n    public void testZero(){\r\n        assertEquals(\"Übersetzung der Zahl 0 nicht möglich (1.0)\", translator.translateNumber(0));\r\n    }\r\n\r\n    @Test\r\n    public void testBigger(){\r\n        assertEquals(\"Übersetzung der Zahl 11 nicht möglich (1.0)\", translator.translateNumber(11));\r\n    }\r\n\r\n    @Test\r\n    public void testNegative(){\r\n        assertEquals(\"Übersetzung der Zahl -1 nicht möglich (1.0)\", translator.translateNumber(-1));\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/Uebung1/test/GermanTranslatorTest.java b/src/Uebung1/test/GermanTranslatorTest.java
--- a/src/Uebung1/test/GermanTranslatorTest.java	
+++ b/src/Uebung1/test/GermanTranslatorTest.java	
@@ -1,7 +1,7 @@
-package Uebung1.test;
+package uebung1.test;
 
-import Uebung1.control.GermanTranslator;
-import Uebung1.control.Translator;
+import uebung1.control.GermanTranslator;
+import uebung1.control.Translator;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
Index: src/Uebung1/view/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Uebung1.view;\r\n\r\nimport Uebung1.control.Translator;\r\nimport Uebung1.utility.TranslatorFactory;\r\n\r\npublic class Client {\r\n\r\n\t\t/*\r\n\t\t * Methode zur Ausgabe einer Zahl auf der Console (auch bezeichnet als CLI, Terminal)\r\n\t\t */\r\n\t\tpublic void display( int aNumber ){\r\n\t\t\t// In dieser Methode soll die Methode translateNumber\r\n\t\t\t// mit dem übergegebenen Wert der Variable aNumber\r\n\t\t\t// aufgerufen werden.\r\n\t\t\t//\r\n\t\t\t// Strenge Implementierung gegen das Interface Translator gewuenscht!\r\n\r\n\t\t\t//Implementierung mittels Factory Klasse\r\n\t\t\tTranslator translator = TranslatorFactory.createGermanTranslator();\r\n\t\t\tSystem.out.println(\"Das Ergebnis der Berechnung: \" + translator.translateNumber(aNumber));\r\n\t\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
===================================================================
diff --git a/src/Uebung1/view/Client.java b/src/Uebung1/view/Client.java
--- a/src/Uebung1/view/Client.java	
+++ b/src/Uebung1/view/Client.java	
@@ -1,7 +1,7 @@
-package Uebung1.view;
+package uebung1.view;
 
-import Uebung1.control.Translator;
-import Uebung1.utility.TranslatorFactory;
+import uebung1.control.Translator;
+import uebung1.utility.TranslatorFactory;
 
 public class Client {
 
Index: src/Uebung1/control/Translator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Uebung1.control;\r\n\r\n/**\r\n * Das Translator Interface. Die Anzahl der Methoden ist fix\r\n * und darf NICHT erweitert werden. Sichtbarkeiten der Methoden koennen\r\n * unter Umstaenden angepasst werden.\r\n *\r\n * @author saschaalda\r\n *\r\n */\r\n\r\npublic interface Translator {\r\n\t\r\n\tdouble version = 1.0; // Version des Interface\r\n\t\r\n\t/*\r\n\t * Uebersetzt eine numerische Zahl in eine String-basierte\r\n\t * Repraesentation gemaess der Spezifikation in der Aufgabe 1-2 \r\n\t */\r\n\tString translateNumber(int number);\r\n\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
===================================================================
diff --git a/src/Uebung1/control/Translator.java b/src/Uebung1/control/Translator.java
--- a/src/Uebung1/control/Translator.java	
+++ b/src/Uebung1/control/Translator.java	
@@ -1,4 +1,4 @@
-package Uebung1.control;
+package uebung1.control;
 
 /**
  * Das Translator Interface. Die Anzahl der Methoden ist fix
Index: src/Uebung1/control/GermanTranslator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Uebung1.control;\r\n\r\nimport java.util.List;\r\n\r\npublic class GermanTranslator implements Translator {\r\n\r\n\tpublic String date = \"Okt/2022\"; // Default-Wert\r\n\r\n\t/**\r\n\t * Methode zur Übersetzung einer Zahl in eine String-Repraesentation\r\n\t */\r\n\tpublic String translateNumber( int number ) {\r\n\t\t// [ihr Source Code aus Übung 1-2]\r\n\t\ttry {\r\n\t\t\tString[] numbers = {\"eins\", \"zwei\", \"drei\", \"vier\", \"fünf\", \"sechs\", \"sieben\", \"acht\", \"neun\", \"zehn\"};\r\n\t\t\treturn numbers[number-1];\r\n\t\t}\r\n\t\tcatch (IndexOutOfBoundsException e){\r\n\t\t\treturn \"Übersetzung der Zahl \" + number + \" nicht möglich (\" + version + \")\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Objektmethode der Klasse GermanTranslator zur Ausgabe einer Info.\r\n\t */\r\n\tpublic void printInfo(){\r\n\t\tSystem.out.println( \"GermanTranslator v1.9, erzeugt am \" + this.date );\r\n\t}\r\n\r\n\t/**\r\n\t * Setzen des Datums, wann der Uebersetzer erzeugt wurde (Format: Monat/Jahr (Beispiel: Okt/2022))\r\n\t * Das Datum sollte system-intern durch eine Control-Klasse gesetzt werden und nicht von externen View-Klassen\r\n\t */\r\n\tpublic void setDate( String date ) {\r\n\t\tthis.date = date;\r\n\t}\r\n\r\n}\r\n
===================================================================
diff --git a/src/Uebung1/control/GermanTranslator.java b/src/Uebung1/control/GermanTranslator.java
--- a/src/Uebung1/control/GermanTranslator.java	
+++ b/src/Uebung1/control/GermanTranslator.java	
@@ -1,4 +1,4 @@
-package Uebung1.control;
+package uebung1.control;
 
 import java.util.List;
 
